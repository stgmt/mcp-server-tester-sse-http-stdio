#!/usr/bin/env python3

"""
üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π Python —Å–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ NPM ‚Üî Python

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ Node.js –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∫–∞–∫ fallback.
–ü–∞—Ä—Å–∏—Ç –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ NPX –∫–æ–º–∞–Ω–¥ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥.
"""

import subprocess
import json
import re
import os
from pathlib import Path
from dataclasses import dataclass, field
from typing import List, Dict, Any, Optional


@dataclass
class CommandOption:
    """–û–ø—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã CLI."""
    option: str
    description: str
    required: bool = False
    has_value: bool = True
    default: Optional[str] = None


@dataclass 
class Command:
    """CLI –∫–æ–º–∞–Ω–¥–∞."""
    name: str
    description: str
    options: List[CommandOption] = field(default_factory=list)
    usage: str = ""
    examples: List[str] = field(default_factory=list)


class PythonCommandSynchronizer:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ –Ω–∞ Python (fallback –∫–æ–≥–¥–∞ Node.js –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)."""
    
    def __init__(self):
        self.npm_package = "mcp-server-tester-sse-http-stdio" 
        self.commands: Dict[str, Command] = {}
    
    def check_npm_package(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å NPM –ø–∞–∫–µ—Ç–∞."""
        try:
            result = subprocess.run(
                ["npx", self.npm_package, "--help"],
                capture_output=True,
                text=True,
                timeout=15
            )
            return result.returncode == 0
        except (subprocess.TimeoutExpired, FileNotFoundError):
            return False
    
    def extract_commands(self) -> Dict[str, Command]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ NPM –ø–∞–∫–µ—Ç–∞."""
        print("üîç –ò–∑–≤–ª–µ–∫–∞—é –∫–æ–º–∞–Ω–¥—ã –∏–∑ NPM –ø–∞–∫–µ—Ç–∞...")
        
        if not self.check_npm_package():
            raise RuntimeError(
                f"NPM –ø–∞–∫–µ—Ç {self.npm_package} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. "
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install -g mcp-server-tester-sse-http-stdio"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π help
        main_help = self._get_help("")
        self._parse_main_help(main_help)
        
        # –ü–æ–ª—É—á–∞–µ–º help –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
        for cmd_name in list(self.commands.keys()):
            cmd_help = self._get_help(cmd_name)
            if cmd_help:
                self._parse_command_help(cmd_name, cmd_help)
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(self.commands)} –∫–æ–º–∞–Ω–¥")
        return self.commands
    
    def _get_help(self, command: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç help —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã."""
        cmd = ["npx", self.npm_package]
        if command:
            cmd.append(command)
        cmd.append("--help")
        
        try:
            result = subprocess.run(
                cmd, capture_output=True, text=True, timeout=10
            )
            return result.stdout if result.returncode == 0 else ""
        except subprocess.TimeoutExpired:
            print(f"‚ö†Ô∏è Timeout –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ help –¥–ª—è {command or 'main'}")
            return ""
    
    def _parse_main_help(self, help_text: str) -> None:
        """–ü–∞—Ä—Å–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π help –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."""
        lines = help_text.split('\n')
        in_commands = False
        
        for line in lines:
            if 'Commands:' in line:
                in_commands = True
                continue
            elif in_commands and line.strip() and not line.startswith(' '):
                break
            elif in_commands and line.strip():
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –∫–æ–º–∞–Ω–¥—ã: "  tools [options]  Run MCP server tools tests"
                match = re.match(r'\s+(\w+)(?:\s+\[.*?\])?\s+(.+)$', line)
                if match:
                    cmd_name, description = match.groups()
                    self.commands[cmd_name] = Command(
                        name=cmd_name,
                        description=description.strip()
                    )
    
    def _parse_command_help(self, cmd_name: str, help_text: str) -> None:
        """–ü–∞—Ä—Å–∏—Ç help –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã."""
        if cmd_name not in self.commands:
            return
        
        command = self.commands[cmd_name]
        lines = help_text.split('\n')
        current_section = None
        
        for line in lines:
            line = line.rstrip()
            
            if 'Usage:' in line:
                current_section = 'usage'
            elif 'Options:' in line:
                current_section = 'options'
            elif 'Examples:' in line:
                current_section = 'examples'
            elif current_section == 'usage' and line.strip():
                command.usage = line.strip()
                current_section = None
            elif current_section == 'options' and line.strip():
                option = self._parse_option_line(line)
                if option:
                    command.options.append(option)
            elif current_section == 'examples' and line.strip().startswith('$'):
                command.examples.append(line.strip())
    
    def _parse_option_line(self, line: str) -> Optional[CommandOption]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –æ–ø—Ü–∏–∏."""
        # –ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–æ–∫:
        # "  --server-config <file>   MCP server configuration (required)"
        # "  -v, --verbose            Enable verbose output" 
        # "  --timeout <ms>          Test timeout (default: 10000)"
        
        option_match = re.match(
            r'\s*(-\w|--[\w-]+)(?:,?\s*(--?[\w-]+))?\s*(?:<[^>]+>)?\s*(.*)$',
            line
        )
        
        if not option_match:
            return None
        
        short_opt, long_opt, description = option_match.groups()
        option_name = long_opt or short_opt
        
        if not option_name:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –æ–ø—Ü–∏–∏
        has_value = '<' in line or '>' in line
        required = 'required' in description.lower()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º default –∑–Ω–∞—á–µ–Ω–∏–µ
        default_match = re.search(r'default:\s*([^)]+)', description, re.I)
        default_val = default_match.group(1).strip() if default_match else None
        
        return CommandOption(
            option=option_name,
            description=description.strip(),
            required=required,
            has_value=has_value,
            default=default_val
        )
    
    def generate_python_cli(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Python CLI –∫–æ–¥."""
        print("üêç –ì–µ–Ω–µ—Ä–∏—Ä—É—é Python CLI –∫–æ–¥...")
        
        code_parts = [
            self._generate_header(),
            self._generate_main_group(),
        ]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        for command in self.commands.values():
            code_parts.append(self._generate_command(command))
        
        code_parts.append(self._generate_footer())
        
        return '\n'.join(code_parts)
    
    def _generate_header(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞."""
        return '''"""
Command-line interface for MCP Server Tester Python wrapper.
Auto-generated from NPM package commands - DO NOT EDIT MANUALLY!
Use scripts/sync_commands.py to regenerate.
"""

import sys
import json
import subprocess
from pathlib import Path
from typing import Optional

import click

from .core import MCPTester
from .exceptions import MCPTesterError


'''
    
    def _generate_main_group(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω—É—é –≥—Ä—É–ø–ø—É –∫–æ–º–∞–Ω–¥."""
        return '''@click.group()
@click.version_option(version="1.0.0")
def main() -> None:
    """Python wrapper for mcp-server-tester-sse-http-stdio NPM package."""
    pass


'''
    
    def _generate_command(self, command: Command) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã."""
        lines = [f'@main.command()']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ Click
        for option in command.options:
            lines.append(self._generate_click_option(option))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        params = [self._option_to_param(opt.option) for opt in command.options]
        func_signature = f"def {command.name}({', '.join(params)}):"
        
        lines.extend([
            func_signature,
            f'    """{command.description}"""',
            '    try:',
            '        # –î–µ–ª–µ–≥–∏—Ä—É–µ–º NPM –ø–∞–∫–µ—Ç—É –Ω–∞–ø—Ä—è–º—É—é',
            f'        cmd = ["npx", "mcp-server-tester-sse-http-stdio", "{command.name}"]',
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –∫–æ–º–∞–Ω–¥–µ
        for option in command.options:
            param_name = self._option_to_param(option.option)
            if option.has_value:
                lines.append(f'        if {param_name}:')
                lines.append(f'            cmd.extend(["{option.option}", str({param_name})])')
            else:
                lines.append(f'        if {param_name}:')
                lines.append(f'            cmd.append("{option.option}")')
        
        lines.extend([
            '',
            '        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É',
            '        result = subprocess.run(',
            '            cmd, capture_output=True, text=True, timeout=30',
            '        )',
            '',
            '        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
            '        if result.stdout:',
            '            click.echo(result.stdout)',
            '        if result.stderr:',
            '            click.echo(result.stderr, err=True)',
            '',
            '        sys.exit(result.returncode)',
            '',
            '    except subprocess.TimeoutExpired:',
            f'        click.echo("Timeout executing {command.name} command", err=True)',
            '        sys.exit(1)',
            '    except Exception as e:',
            '        click.echo(f"Error: {{e}}", err=True)',
            '        sys.exit(1)',
            '',
            ''
        ])
        
        return '\n'.join(lines)
    
    def _generate_click_option(self, option: CommandOption) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Click –æ–ø—Ü–∏—é."""
        parts = [f'@click.option("{option.option}"']
        
        if option.required:
            parts.append('required=True')
        
        if option.default:
            parts.append(f'default={repr(option.default)}')
        
        if not option.has_value:
            parts.append('is_flag=True')
        
        if option.description:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            desc = option.description.replace('"', '\\"')
            parts.append(f'help="{desc}"')
        
        return f"{parts[0]}, {', '.join(parts[1:])})"
    
    def _option_to_param(self, option_name: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–º—è –æ–ø—Ü–∏–∏ –≤ –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ Python."""
        return option_name.lstrip('-').replace('-', '_')
    
    def _generate_footer(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ—É—Ç–µ—Ä —Ñ–∞–π–ª–∞."""
        return '''
if __name__ == "__main__":
    main()
'''
    
    def save_results(self, cli_code: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        src_dir = Path("../src/mcp_server_tester")
        src_dir.mkdir(parents=True, exist_ok=True)
        
        backup_dir = Path("../backups")
        backup_dir.mkdir(exist_ok=True)
        
        # Backup —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        cli_path = src_dir / "cli.py"
        if cli_path.exists():
            import shutil
            from datetime import datetime
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = backup_dir / f"cli_{timestamp}.py.backup"
            shutil.copy2(cli_path, backup_path)
            print(f"üì¶ Backup: {backup_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π CLI
        generated_path = src_dir / "cli_generated.py"
        with open(generated_path, 'w', encoding='utf-8') as f:
            f.write(cli_code)
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {generated_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        commands_json = {
            name: {
                "description": cmd.description,
                "options": [
                    {
                        "option": opt.option,
                        "description": opt.description,
                        "required": opt.required,
                        "has_value": opt.has_value,
                        "default": opt.default
                    }
                    for opt in cmd.options
                ],
                "usage": cmd.usage,
                "examples": cmd.examples
            }
            for name, cmd in self.commands.items()
        }
        
        with open("../commands_extracted.json", 'w', encoding='utf-8') as f:
            json.dump(commands_json, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ../commands_extracted.json")
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        total_options = sum(len(cmd.options) for cmd in self.commands.values())
        
        report = f"""# üîÑ –û—Ç—á–µ—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ NPM ‚Üî Python (Python –≤–µ—Ä—Å–∏—è)

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- **–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥:** {len(self.commands)}
- **–í—Å–µ–≥–æ –æ–ø—Ü–∏–π:** {total_options}
- **–î–∞—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:** {__import__('datetime').datetime.now().isoformat()}

## –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

"""
        
        for name, command in self.commands.items():
            report += f"### `{name}`\n"
            report += f"- **–û–ø–∏—Å–∞–Ω–∏–µ:** {command.description}\n"
            report += f"- **–û–ø—Ü–∏–π:** {len(command.options)}\n"
            
            if command.options:
                report += "- **–û–ø—Ü–∏–∏:**\n"
                for opt in command.options:
                    required_mark = " (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)" if opt.required else ""
                    report += f"  - `{opt.option}`: {opt.description}{required_mark}\n"
            
            report += "\n"
        
        report += """
## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

```bash
# NPM –≤–µ—Ä—Å–∏—è
npx mcp-server-tester-sse-http-stdio tools test.yaml --server-config config.json

# Python –≤–µ—Ä—Å–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)  
mcp-server-tester tools test.yaml --server-config config.json
```

## –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
- –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ Python —Å–∫—Ä–∏–ø—Ç–æ–º (fallback)
- –ö–æ–º–∞–Ω–¥—ã –¥–µ–ª–µ–≥–∏—Ä—É—é—Ç—Å—è NPX –Ω–∞–ø—Ä—è–º—É—é 
- –ü–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å NPM –≤–µ—Ä—Å–∏–µ–π
"""
        
        return report
    
    def sync(self) -> None:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        print("üöÄ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥ (Python –≤–µ—Ä—Å–∏—è)...")
        print()
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            commands = self.extract_commands()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            cli_code = self.generate_python_cli()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.save_results(cli_code)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self.generate_report()
            with open("../sync_report.md", 'w', encoding='utf-8') as f:
                f.write(report)
            
            print()
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print("  - ../src/mcp_server_tester/cli_generated.py")
            print("  - ../commands_extracted.json") 
            print("  - ../sync_report.md")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            raise


if __name__ == "__main__":
    synchronizer = PythonCommandSynchronizer()
    synchronizer.sync()