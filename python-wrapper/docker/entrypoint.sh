#!/bin/bash

# üê≥ MCP Server Tester Docker Entrypoint
# 
# –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≥–∏–±–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
# - NPM –∫–æ–º–∞–Ω–¥—ã (npx)
# - Python –∫–æ–º–∞–Ω–¥—ã (mcp-server-tester) 
# - –ü—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã bash/node/python

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m' 
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }
header() { echo -e "${PURPLE}üê≥ $1${NC}"; }

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
show_container_info() {
    header "MCP Server Tester Docker Container v1.0.0"
    echo
    echo "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:"
    echo "  ‚Ä¢ Node.js: $(node --version)"
    echo "  ‚Ä¢ NPM: $(npm --version)" 
    echo "  ‚Ä¢ Python: $(python3 --version)"
    echo "  ‚Ä¢ mcp-server-tester-sse-http-stdio: $(npx mcp-server-tester-sse-http-stdio --version)"
    echo "  ‚Ä¢ mcp-server-tester (Python): $(mcp-server-tester --version)"
    echo
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
show_help() {
    show_container_info
    
    echo "üöÄ –°–ø–æ—Å–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:"
    echo
    echo "1Ô∏è‚É£ NPM –ø–∞–∫–µ—Ç (TypeScript/JavaScript):"
    echo "   docker run --rm -v \$(pwd):/workspace mcp-server-tester \\"
    echo "     npx mcp-server-tester-sse-http-stdio tools test.yaml --server-config config.json"
    echo
    echo "2Ô∏è‚É£ Python –ø–∞–∫–µ—Ç:"
    echo "   docker run --rm -v \$(pwd):/workspace mcp-server-tester \\"
    echo "     mcp-server-tester test --server-config config.json --test test.yaml"
    echo
    echo "3Ô∏è‚É£ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º:"
    echo "   docker run --rm -it -v \$(pwd):/workspace mcp-server-tester bash"
    echo
    echo "4Ô∏è‚É£ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "   docker run --rm mcp-server-tester node --version"
    echo "   docker run --rm mcp-server-tester python3 -c \"import sys; print(sys.version)\""
    echo
    echo "üìã –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    echo "   # HTTP MCP —Å–µ—Ä–≤–µ—Ä"
    echo "   docker run --rm -v \$(pwd):/workspace mcp-server-tester \\"
    echo "     tools http-test.yaml --server-config http-config.json --server-name my-server"
    echo
    echo "   # SSE MCP —Å–µ—Ä–≤–µ—Ä"  
    echo "   docker run --rm -v \$(pwd):/workspace mcp-server-tester \\"
    echo "     tools sse-test.yaml --server-config sse-config.json --server-name graphiti"
    echo
    echo "   # STDIO MCP —Å–µ—Ä–≤–µ—Ä"
    echo "   docker run --rm -v \$(pwd):/workspace mcp-server-tester \\"
    echo "     tools stdio-test.yaml --server-config stdio-config.json --server-name local-server"
    echo
    echo "üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "   compliance  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª—É MCP"
    echo "   evals       - LLM evaluation —Ç–µ—Å—Ç—ã" 
    echo "   schema      - –ü–æ–∫–∞–∑–∞—Ç—å JSON —Å—Ö–µ–º—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    echo "   doctor      - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    echo
    echo "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://github.com/stgmt/mcp-server-tester-sse-http-stdio"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
run_doctor() {
    header "üè• MCP Server Tester Doctor (Docker)"
    echo
    
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js..."
    if command -v node &> /dev/null; then
        success "Node.js: $(node --version)"
    else
        error "Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ NPM..."
    if command -v npm &> /dev/null; then
        success "NPM: $(npm --version)"
    else
        error "NPM –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Python..."
    if command -v python3 &> /dev/null; then
        success "Python: $(python3 --version)"
    else
        error "Python –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ NPM –ø–∞–∫–µ—Ç–∞..."
    if npx mcp-server-tester-sse-http-stdio --help &> /dev/null; then
        success "mcp-server-tester-sse-http-stdio: –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        error "mcp-server-tester-sse-http-stdio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç–∞..."
    if mcp-server-tester --help &> /dev/null; then
        success "mcp-server-tester: –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        error "mcp-server-tester –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"  
    fi
    
    echo
    success "üéØ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é MCP —Å–µ—Ä–≤–µ—Ä–æ–≤!"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -eq 0 ]; then
    show_help
    exit 0
fi

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
case "$1" in
    --help|-h|help)
        show_help
        exit 0
        ;;
    --version|-v|version)
        show_container_info
        exit 0
        ;;
    doctor)
        run_doctor
        exit 0
        ;;
    info)
        show_container_info
        exit 0
        ;;
esac

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π MCP tester
MCP_COMMANDS=("tools" "evals" "compliance" "schema" "documentation" "test" "create-server-config" "create-test-config")

for cmd in "${MCP_COMMANDS[@]}"; do
    if [ "$1" = "$cmd" ]; then
        # –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ MCP tester - –∏—Å–ø–æ–ª—å–∑—É–µ–º Python wrapper
        info "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ MCP tester —á–µ—Ä–µ–∑ Python wrapper: $*"
        exec mcp-server-tester "$@"
    fi
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ NPX –∫–æ–º–∞–Ω–¥–æ–π
if [ "$1" = "npx" ]; then
    info "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è NPX –∫–æ–º–∞–Ω–¥–∞: $*"
    exec "$@"
fi

# –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ - –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
info "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: $*"
exec "$@"