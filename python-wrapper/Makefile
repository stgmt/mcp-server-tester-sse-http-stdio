# üîÑ Makefile –¥–ª—è MCP Server Tester Python Wrapper
#
# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
#   make sync       - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å NPM –ø–∞–∫–µ—Ç–æ–º
#   make test       - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤  
#   make build      - –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞
#   make install    - –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
#   make clean      - –û—á–∏—Å—Ç–∫–∞
#   make help       - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

.PHONY: help sync sync-node sync-python test build install clean check-deps lint format

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PYTHON := python3
NPM_PACKAGE := mcp-server-tester-sse-http-stdio
SOURCE_DIR := src/mcp_server_tester
SCRIPTS_DIR := scripts
TESTS_DIR := tests

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN := \033[0;32m
BLUE := \033[0;34m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
help:
	@echo "$(BLUE)üîÑ MCP Server Tester Python Wrapper$(NC)"
	@echo ""
	@echo "$(GREEN)–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@echo "  $(YELLOW)sync$(NC)          - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —Å NPM –ø–∞–∫–µ—Ç–æ–º"  
	@echo "  $(YELLOW)sync-node$(NC)     - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Node.js (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ)"
	@echo "  $(YELLOW)sync-python$(NC)   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Python (fallback)"
	@echo "  $(YELLOW)test$(NC)          - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"
	@echo "  $(YELLOW)test-quick$(NC)    - –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö"
	@echo "  $(YELLOW)build$(NC)         - –°–±–æ—Ä–∫–∞ wheel –ø–∞–∫–µ—Ç–∞"
	@echo "  $(YELLOW)install$(NC)       - –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ editable —Ä–µ–∂–∏–º–µ"
	@echo "  $(YELLOW)publish$(NC)       - –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ PyPI"
	@echo "  $(YELLOW)clean$(NC)         - –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
	@echo "  $(YELLOW)lint$(NC)          - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ (flake8, mypy)"
	@echo "  $(YELLOW)format$(NC)        - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ (black)"
	@echo "  $(YELLOW)check-deps$(NC)    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
	@echo ""
	@echo "$(GREEN)–ü—Ä–∏–º–µ—Ä—ã:$(NC)"
	@echo "  make sync                    # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"
	@echo "  make test                    # –í—Å–µ —Ç–µ—Å—Ç—ã"  
	@echo "  make build install           # –°–±–æ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
	@echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check-deps:
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	@command -v $(PYTHON) >/dev/null || (echo "$(RED)‚ùå Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)" && exit 1)
	@command -v node >/dev/null || echo "$(YELLOW)‚ö†Ô∏è  Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Python fallback$(NC)"
	@command -v npx >/dev/null || echo "$(YELLOW)‚ö†Ô∏è  NPX –Ω–µ –Ω–∞–π–¥–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Python fallback$(NC)"
	@$(PYTHON) -c "import click, yaml, requests" 2>/dev/null || (echo "$(RED)‚ùå –ù–µ –≤—Å–µ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)" && exit 1)
	@echo "$(GREEN)‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã$(NC)"

# –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–µ—Ç–æ–¥)
sync: check-deps
	@echo "$(BLUE)üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥...$(NC)"
	@if command -v node >/dev/null && command -v npx >/dev/null; then \
		echo "$(GREEN)‚Üí –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Node.js —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä$(NC)"; \
		$(MAKE) sync-node; \
	else \
		echo "$(YELLOW)‚Üí –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Python fallback —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä$(NC)"; \
		$(MAKE) sync-python; \
	fi

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Node.js (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
sync-node:
	@echo "$(BLUE)üü¢ Node.js —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...$(NC)"
	@cd $(SCRIPTS_DIR) && chmod +x sync.sh && ./sync.sh

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Python (fallback)
sync-python:
	@echo "$(BLUE)üêç Python fallback —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...$(NC)"
	@cd $(SCRIPTS_DIR) && $(PYTHON) sync_commands.py

# Dry-run —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è)
sync-dry-run:
	@echo "$(BLUE)üëÅÔ∏è  Dry-run —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...$(NC)"
	@cd $(SCRIPTS_DIR) && ./sync.sh --dry-run

# –¢–µ—Å—Ç—ã
test: check-deps
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@$(PYTHON) -m pytest $(TESTS_DIR)/ -v --tb=short

test-quick: check-deps
	@echo "$(BLUE)‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã...$(NC)"
	@$(PYTHON) -m pytest $(TESTS_DIR)/ -v -k "not integration" --tb=short

test-integration: check-deps
	@echo "$(BLUE)üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã...$(NC)"
	@$(PYTHON) -m pytest $(TESTS_DIR)/ -v -k "integration" --tb=short

# –õ–∏–Ω—Ç–∏–Ω–≥ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
lint: check-deps
	@echo "$(BLUE)üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...$(NC)"
	@$(PYTHON) -m flake8 $(SOURCE_DIR)/ $(TESTS_DIR)/ --max-line-length=88
	@$(PYTHON) -m mypy $(SOURCE_DIR)/ --ignore-missing-imports

format: check-deps
	@echo "$(BLUE)üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	@$(PYTHON) -m black $(SOURCE_DIR)/ $(TESTS_DIR)/

# –°–±–æ—Ä–∫–∞
build: check-deps lint test-quick
	@echo "$(BLUE)üì¶ –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞...$(NC)"
	@$(PYTHON) -m pip install --upgrade build
	@$(PYTHON) -m build
	@echo "$(GREEN)‚úÖ –ü–∞–∫–µ—Ç —Å–æ–±—Ä–∞–Ω –≤ dist/$(NC)"

# –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
install: check-deps
	@echo "$(BLUE)üì• –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞...$(NC)"
	@$(PYTHON) -m pip install -e .
	@echo "$(GREEN)‚úÖ –ü–∞–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ editable —Ä–µ–∂–∏–º–µ$(NC)"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
install-dev: check-deps
	@echo "$(BLUE)üõ†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@$(PYTHON) -m pip install -e ".[dev]"
	@echo "$(GREEN)‚úÖ –ü–∞–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏$(NC)"

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ PyPI
publish: build
	@echo "$(BLUE)üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ PyPI...$(NC)"
	@$(PYTHON) -m pip install --upgrade twine
	@$(PYTHON) -m twine upload dist/*
	@echo "$(GREEN)‚úÖ –ü–∞–∫–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ PyPI$(NC)"

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Test PyPI 
publish-test: build
	@echo "$(BLUE)üß™ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Test PyPI...$(NC)"
	@$(PYTHON) -m pip install --upgrade twine
	@$(PYTHON) -m twine upload --repository testpypi dist/*
	@echo "$(GREEN)‚úÖ –ü–∞–∫–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Test PyPI$(NC)"

# ======================================
# üê≥ DOCKER –ö–û–ú–ê–ù–î–´
# ======================================

# –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
docker-build:
	@echo "$(BLUE)üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...$(NC)"
	@docker build -t mcp-server-tester:latest .
	@docker build -t mcp-server-tester:1.0.0 .
	@echo "$(GREEN)‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω$(NC)"

# –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É)
docker-run: docker-build
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...$(NC)"
	@docker run --rm mcp-server-tester:latest

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º Docker
docker-shell: docker-build
	@echo "$(BLUE)üêö –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º Docker...$(NC)"
	@docker run --rm -it -v $(shell pwd):/workspace mcp-server-tester:latest bash

# –¢–µ—Å—Ç Docker –æ–±—Ä–∞–∑–∞
docker-test: docker-build
	@echo "$(BLUE)üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞...$(NC)"
	@docker run --rm mcp-server-tester:latest doctor
	@docker run --rm mcp-server-tester:latest --version
	@echo "$(GREEN)‚úÖ Docker –æ–±—Ä–∞–∑ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω$(NC)"

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è Docker –æ–±—Ä–∞–∑–∞ –≤ Docker Hub
docker-publish: docker-build docker-test
	@echo "$(BLUE)üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è Docker –æ–±—Ä–∞–∑–∞...$(NC)"
	@docker tag mcp-server-tester:latest stgmt/mcp-server-tester:latest
	@docker tag mcp-server-tester:1.0.0 stgmt/mcp-server-tester:1.0.0
	@docker push stgmt/mcp-server-tester:latest
	@docker push stgmt/mcp-server-tester:1.0.0
	@echo "$(GREEN)‚úÖ Docker –æ–±—Ä–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω$(NC)"

# –ó–∞–ø—É—Å–∫ —Å docker-compose
docker-compose-up:
	@echo "$(BLUE)üê≥ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ docker-compose...$(NC)"
	@docker-compose up --build

# –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
docker-compose-dev:
	@echo "$(BLUE)üõ†Ô∏è  –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ docker-compose...$(NC)"
	@docker-compose --profile dev up --build -d mcp-tester-dev
	@docker-compose exec mcp-tester-dev bash

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
docker-examples:
	@echo "$(BLUE)üìã –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ docker-compose...$(NC)"
	@docker-compose --profile examples up --build

# –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤
docker-clean:
	@echo "$(BLUE)üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤...$(NC)"
	@docker-compose down --volumes --remove-orphans || true
	@docker rmi mcp-server-tester:latest mcp-server-tester:1.0.0 || true
	@docker system prune -f
	@echo "$(GREEN)‚úÖ Docker —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã$(NC)"

# –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ (Python, NPM, Docker)
build-all: build docker-build
	@echo "$(GREEN)‚úÖ –í—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–æ–±—Ä–∞–Ω—ã:$(NC)"
	@echo "  üì¶ Python wheel: dist/"
	@echo "  üê≥ Docker –æ–±—Ä–∞–∑: mcp-server-tester:latest"

# –û—á–∏—Å—Ç–∫–∞
clean:
	@echo "$(BLUE)üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...$(NC)"
	@rm -rf build/ dist/ *.egg-info/
	@find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.pyc" -delete
	@find . -type f -name "*.pyo" -delete
	@find . -type f -name ".coverage" -delete
	@rm -rf .pytest_cache/
	@rm -rf .mypy_cache/
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–∫–ª—é—á–∞—è backup –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
clean-all: clean
	@echo "$(BLUE)üóëÔ∏è  –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...$(NC)"
	@rm -rf backups/
	@rm -f commands_extracted.json sync_report.md
	@rm -f $(SOURCE_DIR)/cli_generated.py
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
sync-status:
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...$(NC)"
	@if [ -f "sync_report.md" ]; then \
		echo "$(GREEN)‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏$(NC)"; \
		grep -E "–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥|–î–∞—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏" sync_report.md || true; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  –û—Ç—á–µ—Ç –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
		echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: make sync"; \
	fi
	@if [ -f "$(SOURCE_DIR)/cli_generated.py" ]; then \
		echo "$(GREEN)‚úÖ –ù–∞–π–¥–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CLI$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CLI –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
	fi

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–∞–∫–µ—Ç–∞
demo: install
	@echo "$(BLUE)üé¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–∞–∫–µ—Ç–∞...$(NC)"
	@echo "$(YELLOW)1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã:$(NC)"
	@mcp-server-tester doctor
	@echo ""
	@echo "$(YELLOW)2. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É:$(NC)"  
	@mcp-server-tester --help
	@echo ""
	@echo "$(GREEN)‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

# CI/CD –∫–æ–º–∞–Ω–¥—ã
ci-test: check-deps lint test

ci-build: ci-test build

ci-publish: ci-build publish

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
info:
	@echo "$(BLUE)‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ$(NC)"
	@echo "–ù–∞–∑–≤–∞–Ω–∏–µ: MCP Server Tester Python Wrapper"
	@echo "–í–µ—Ä—Å–∏—è: 1.0.0"
	@echo "NPM –ø–∞–∫–µ—Ç: $(NPM_PACKAGE)"
	@echo "Python: $(shell $(PYTHON) --version)"
	@echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤: $(SOURCE_DIR)"
	@echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤: $(TESTS_DIR)"
	@if command -v node >/dev/null; then \
		echo "Node.js: $(shell node --version)"; \
	fi
	@if [ -f "sync_report.md" ]; then \
		echo "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: $(shell grep "–î–∞—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏" sync_report.md | cut -d: -f2- | xargs)"; \
	fi