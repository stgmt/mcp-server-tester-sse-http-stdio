name: PyPI Publish

on:
  push:
    branches: [main, master]
    tags: ['v*']
    paths:
      - 'python-wrapper/**'
      - '.github/workflows/pypi-publish.yml'
  release:
    types: [created]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        node-version: ['18.x', '20.x']

    defaults:
      run:
        working-directory: ./python-wrapper

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install Node.js dependencies
      run: |
        # Install the NPM package globally for testing
        npm install -g mcp-server-tester-sse-http-stdio@latest
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check src/ tests/
    
    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        pytest --cov=mcp_server_tester --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11' && matrix.node-version == '20.x'
      with:
        file: ./python-wrapper/coverage.xml
        flags: unittests
        name: codecov-umbrella

  publish-pypi:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    defaults:
      run:
        working-directory: ./python-wrapper
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Check if version changed
      id: version-check
      run: |
        CURRENT_VERSION=$(python -c "
        import tomllib
        with open('pyproject.toml', 'rb') as f:
            data = tomllib.load(f)
        print(data['project']['version'])
        ")
        
        # Try to get published version from PyPI
        PUBLISHED_VERSION=$(pip index versions mcp-server-tester 2>/dev/null | grep "Available versions:" | head -1 | awk '{print $3}' | sed 's/,$//' || echo "0.0.0")
        
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "published-version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
        
        if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
          echo "should-publish=true" >> $GITHUB_OUTPUT
          echo "ðŸš€ Version changed: $PUBLISHED_VERSION â†’ $CURRENT_VERSION"
        else
          echo "should-publish=false" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ Version unchanged: $CURRENT_VERSION"
        fi
    
    - name: Copy README from root
      if: steps.version-check.outputs.should-publish == 'true'
      run: |
        # Copy the main README to python-wrapper for PyPI
        cp ../README.md ./README.md
    
    - name: Build package
      if: steps.version-check.outputs.should-publish == 'true'
      run: |
        python -m build
    
    - name: Check package
      if: steps.version-check.outputs.should-publish == 'true'
      run: |
        twine check dist/*
    
    - name: Publish to PyPI
      if: steps.version-check.outputs.should-publish == 'true'
      run: |
        twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
    
    - name: Create GitHub Release
      if: steps.version-check.outputs.should-publish == 'true' && startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version-check.outputs.current-version }}
        release_name: Release v${{ steps.version-check.outputs.current-version }}
        body: |
          ðŸš€ **Release v${{ steps.version-check.outputs.current-version }}**
          
          Python wrapper for mcp-server-tester-sse-http-stdio NPM package.
          
          ## What's New
          - Automatic release created by GitHub Actions
          
          ## Installation
          ```bash
          pip install mcp-server-tester==${{ steps.version-check.outputs.current-version }}
          ```
          
          ðŸ“¦ **PyPI**: https://pypi.org/project/mcp-server-tester/${{ steps.version-check.outputs.current-version }}/
          ðŸ“š **Documentation**: https://github.com/stgmt/mcp-server-tester-sse-http-stdio#readme
        draft: false
        prerelease: false